For filter_index into n0_filters
|	for channel_no into _Depth
|	|	for y pixel in input_image
|	|	|	for x in pixel in input_image
|	|	|	|
|	|	|	|	//now we are at the desided pixel, time to get the window
|	|	|	|	for i in range (y - floor(Kernal_w/2), y + floor(Kernal_w/2)+1)
|	|	|	|	|	for j in range (x - floor(Kernal_h/2), x + floor(Kernal_h/2)+1)
|	|	|	|	|	|	store into window, input(i,j,channel_no);
|	|	|	|	|
|	|	|	|	// time to multiple element by emlement from the input kernal with the selected window
|	|	|	|	for h in Kernal_h					
|	|	|	|	|	for w in Kernal_w
|	|	|	|	|	 |	store into res, window( h * window_w + w) * weights[filter_index](h, w, channel_no);
|	|	|	|
|	|	|	|	Accmulate res and store the final value in pixel_after_convolution
|	|	|	|	push pixel_after_convolution in channel_output 
|	|
|	|	sum channel_output in filter_conv
|	|	assign the summation result to filter_conv
|	|
|	push the filter_conv in conv_output
|
return conv_output
